##引入表单控件辅助生成
$!formItem

##定义初始变量
#set($tableName = $!tool.firstLowerCase($!{tableInfo.name}))
#set($fileName = $!tableName)
##设置回调
$!callback.setFileName($tool.append($fileName, ".vue"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/views/modules/business"))
##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end
## 组件内容部分

<template>
    <div class="mod-$tableName">
        <el-form :inline="true" :model="dataForm" @keyup.enter.native="getDataList()">
            <el-form-item>
                #foreach($column in $tableInfo.otherColumn)
                    #if($column.hidden=='0')
                        <el-form-item label="$column.labelName" prop="$column.targetName">
                            #generateFormItemForRenRen($column)
                        </el-form-item>
                    #end
                #end
            </el-form-item>
        </el-form>
        <div style="float: right;padding-bottom: 20px">
            <el-button @click="getDataList()">查询</el-button>
            <el-button @click="reset()">重置</el-button>
            <el-button v-if="isAuth('business:$tableName:save')" type="primary" @click="addOrUpdateHandle()">新增</el-button>
            <el-button v-if="isAuth('business:$tableName:delete')" type="danger" @click="deleteHandle()" :disabled="dataListSelections.length <= 0">批量删除</el-button>
        </div>
        <el-table
                :data="dataList"
                border
                v-loading="dataListLoading"
                @selection-change="selectionChangeHandle"
                style="width: 100%;">
            <el-table-column
                    type="selection"
                    header-align="center"
                    align="center"
                    width="50">
            </el-table-column>

            #foreach($column in $tableInfo.fullColumn)
                #if(${column.hidden}=='0')
                    <el-table-column
                            prop="$!{column.targetName}"
                            header-align="center"
                            align="center"
                            label="$!{column.labelName}">
                    </el-table-column>
                #end
            #end
            <el-table-column
                    fixed="right"
                    header-align="center"
                    align="center"
                    width="150"
                    label="操作">
                <template slot-scope="scope">
                    <el-button v-if="isAuth('business:$tableName:update')" type="text" size="small" @click="addOrUpdateHandle(scope.row.${pk.targetName})">修改</el-button>
                    <el-button v-if="isAuth('business:$tableName:delete')" type="text" size="small" @click="deleteHandle(scope.row.${pk.targetName})">删除</el-button>
                </template>
            </el-table-column>
        </el-table>
        <el-pagination
                @size-change="sizeChangeHandle"
                @current-change="currentChangeHandle"
                :current-page="pageIndex"
                :page-sizes="[10, 20, 50, 100]"
                :page-size="pageSize"
                :total="totalPage"
                layout="total, sizes, prev, pager, next, jumper">
        </el-pagination>
        <!-- 弹窗, 新增 / 修改 -->
        <add-or-update v-if="addOrUpdateVisible" ref="addOrUpdate" @refreshDataList="getDataList"></add-or-update>
    </div>
</template>

<script>
    import AddOrUpdate from "./${tableName}-add-or-update"
    export default {
        data () {
            return {
                dataForm: {
                    #foreach($column in $tableInfo.fullColumn)
                        $!{column.targetName}:''#if( $foreach.hasNext), $!{nothing} #end
                    #end
                }$!{nothing},
                dataList: [],
                pageIndex: 1,
                pageSize: 10,
                totalPage: 0,
                dataListLoading: false,
                dataListSelections: [],
                addOrUpdateVisible: false
            }
        },
        components: {
            AddOrUpdate
        },
        activated () {
            this.getDataList()
        },
        methods: {
            //重置查询条件
            reset(){
                this.dataForm = {
                #foreach($column in $tableInfo.fullColumn)
                    $!{column.targetName}:''#if( $foreach.hasNext), $!{nothing} #end
                #end
            }$!{nothing}
            },
            // 获取数据列表
            getDataList () {
                this.dataListLoading = true
                 this.$http({
                     url: this.$http$!{nothing}.adornUrl("/business/${tableName}/list"),
                     method: 'get',
                     params: this.$http$!{nothing}.adornParams({
                         'page':this.pageIndex,
                         'limit': this.pageSize,
                         'queryString': this.dataForm.queryString
                     })}
                 ).then(({data}) => {
                     if (data && data.code === 0) {
                     this.dataList = data.page.list
                     this.totalPage = data.page.totalCount
                 } else {
                     this.dataList = []
                     this.totalPage = 0
                 }
                 this.dataListLoading = false
             })
            },
            // 每页数
            sizeChangeHandle (val) {
                this.pageSize = val
                this.pageIndex = 1
                this.getDataList()
            },
            // 当前页
            currentChangeHandle (val) {
                this.pageIndex = val
                this.getDataList()
            },
            // 多选
            selectionChangeHandle (val) {
                this.dataListSelections = val
            },
            // 新增 / 修改
            addOrUpdateHandle (id) {
                this.addOrUpdateVisible = true
                this.$nextTick(() => {
                    this.$refs.$!{nothing}addOrUpdate.init(id)
                })
            },
            // 删除
             deleteHandle (id) {
                 var ids = id ? [id] : this.dataListSelections.map(item => {
                     return item.${pk.targetName}
                 })
                 this.$confirm$!{nothing}(`确定对[id=${ids.join(',')}]进行[`+(id? '删除' : '批量删除')+"]操作?", '提示', {
                     confirmButtonText: '确定',
                     cancelButtonText: '取消',
                     type: 'warning'
                 }).then(() => {
                     this.$http({
                         url: this.$http.$!{nothing}adornUrl("/business/$tableName"),
                         method: 'delete',
                         data: this.$http.$!{nothing}adornData(ids, false)
                     }).then(({data}) => {
                         if (data && data.code === 0) {
                     this.$message({
                         message: '操作成功',
                         type: 'success',
                         duration: 1500,
                         onClose: () => {
                         this.getDataList()
                     }
                 })
                 } else {
                     this.$message$!{nothing}.error(data.msg)
                 }
             })
             }).catch(() => {})
             }
        }
    }
</script>

